/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: RillenMeister (https://sketchfab.com/RillenMeister)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/simple-office-table-b044f25f823c4d54ab32bdf16a205456
Title: Simple office table
*/

import React, { useEffect, useState } from "react";
import { MeshReflectorMaterial, useGLTF, useTexture, Html } from "@react-three/drei";
import { useEnviromentCustomization } from "../editor/EnviromentCustomizer";
import * as THREE from "three";
import { Spinner } from "react-bootstrap";

export function Table(props) {
  const { tableTxt } = useEnviromentCustomization();
  const { nodes } = useGLTF("./models/desk.glb");
  const [ loading, setLoading ] = useState(true);

  const [diffuseMap, displacementMap, normalMap, roughnessMap] = useTexture([
    tableTxt.diffuse,
    tableTxt.displacement,
    tableTxt.normal,
    tableTxt.roughness,
  ]);

  useEffect(() => {
    const textures = [diffuseMap, displacementMap, normalMap, roughnessMap];

    if (textures.every(texture => texture)) {
      setLoading(false);
    }

    textures.forEach((texture) => {
      texture.needsUpdate = true;
      texture.repeat.set(5, 5);
      texture.offset.set(0, 0);
      texture.wrapS = THREE.RepeatWrapping;
      texture.wrapT = THREE.RepeatWrapping;
    });
  }, [diffuseMap, displacementMap, normalMap, roughnessMap]);

  if (loading) {
    return (
      <Html center>
        console.log("Loading table textures...");
     <Spinner animation="border" />;
      </Html>
    )
    }

  return (
    <group {...props} dispose={null} scale={20} position-y={5}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]} scale-y={0.5} scale-z={1.2}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.defaultMaterial.geometry}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.defaultMaterial_1.geometry}
            />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.defaultMaterial_2.geometry}>
            <MeshReflectorMaterial
            attach="material"
            map={diffuseMap}
            normalMap={normalMap}
            roughnessMap={roughnessMap}
            reflectorOffset={1}
            mirror={0}
            />
          </mesh>
        </group>
      </group>
    </group>
  );
  }

export default Table;

useGLTF.preload("/simple_office_table.glb");