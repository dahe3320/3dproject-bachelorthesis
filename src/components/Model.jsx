/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/notebook/Spiral_Notebook.glb 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

export function Model(props) {
  const { nodes, materials } = useGLTF('/Spiral_Notebook.glb');
  return ( 
    <group {...props} dispose={null}> 
      <group position={[2.021, -0.394, 2.141]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Spiral_Notebook001.geometry} material={materials['Spiral_Notebook_Cover.001']} /> 
        <mesh geometry={nodes.Spiral_Notebook001_1.geometry} material={materials['Spiral_Notebook_Backboard.001']} />
        <mesh geometry={nodes.Spiral_Notebook001_2.geometry} material={materials['Paper.001']} />
        <mesh geometry={nodes.Spiral_Notebook001_3.geometry} material={materials['Spiral_Chome.001']} />
        <mesh geometry={nodes.Spiral_Notebook001_4.geometry} material={materials['rubberSG.001']} />
      </group>
    </group> 
  )
}

useGLTF.preload('/Spiral_Notebook.glb')

export default Model;

/* import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { TextureLoader } from 'three/src/loaders/TextureLoader';


function Module() {
    const [model, setModel] = useState(null);
  
    useEffect(() => {
      const loader = new GLTFLoader().setPath('notebook/');
      const textureLoader = new TextureLoader();
      const texture = textureLoader.load('src/assets/natureglobe.jpg');
      loader.load(
        'scene.gltf',
        (gltf) => {
          const loadedModel = gltf.scene;
          console.log(loadedModel);
          //Spiral_Notebook_Spiral_Chome_0
  
          // Find the object by name
          const notebookCover = loadedModel.getObjectByName('Spiral_Notebook_Spiral_Notebook_Cover_0');
          
          notebookCover.traverse(node => {
            if(node.isMesh) {  
              node.material.color.set(0xffffff);
              node.material.map = texture;
              node.material.map.repeat.set( 2, 2);
              node.material.needsUpdate = true;
             }
            })
   
  
          const notebookSpiral = loadedModel.getObjectByName('Spiral_Notebook_Spiral_Chome_0');
          
          notebookSpiral.traverse(node => {
            if(node.isMesh) {
              node.material.metalness = 0.4;
              node.material.color.set(0xffa5bb);
            }
          })
  
          //loadedModel.rotation.x = 4;
          setModel(loadedModel);
        },
        undefined,
        function (error) {
          console.error(error);
        }
      );
    }, []); // Empty dependency array ensures this effect runs once on mount
  
    return model ? <primitive object={model} /> : null;
  } */